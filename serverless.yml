# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: likezhang
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: podtree-serverless
# "service" is the name of this project. This will also be added to your AWS resource names.
service: podtree-serverless

stages:
  default:
    params:
      userTableName: "users-${sls:stage}"
      goalTableName: "goals-${sls:stage}"
      taskTableName: "tasks-${sls:stage}"
      categoryTableName: "categories-${sls:stage}"
      recurringTaskTableName: "recurring-tasks-${sls:stage}"
provider:
  name: aws
  runtime: nodejs20.x
  iam:
    role:
      name: podtree-serverless-lambda-role
      statements:
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
            - lambda:InvokeAsync
          Resource: "*"
          
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"
        
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
          Resource:
            - Fn::GetAtt: [UserTable, Arn]
            - Fn::GetAtt: [CategoryTable, Arn]
            - Fn::GetAtt: [GoalTable, Arn]
            - Fn::GetAtt: [TaskTable, Arn]
            - Fn::GetAtt: [RecurringTaskTable, Arn]
            

  # environment:
  #   USERS_TABLE: ${param:userTableName}
  logs:
    restApi: true

functions:
  api:
    handler: src/api/index.handler
    events:
      - http:
          path: google-userinfo
          method: get
          cors: true
      - http:
          path: login
          method: post
          cors: true
      - http:
          path: signup
          method: post
          cors: true
      - http:
          path: goals
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Amzn-Trace-Id
              - UserId
            allowCredentials: false
      - http:
          path: goals
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Amzn-Trace-Id
              - UserId
            allowCredentials: false
      - http:
          path: goals/{id}
          method: patch
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Amzn-Trace-Id
              - UserId
            allowCredentials: false
          request:
            parameters:
              paths:
                id: true
      - http:
          path: goals/{id}
          method: delete
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Amzn-Trace-Id
              - UserId
            allowCredentials: false
          request:
            parameters:
              paths:
                id: true
      - http:
          path: tasks
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Amzn-Trace-Id
              - UserId
      - http:
          path: tasks
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Amzn-Trace-Id
              - UserId
            allowCredentials: false
      - http:
          path: analyse/tasks
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Amzn-Trace-Id
              - UserId
            allowCredentials: false
      - http:
          path: tasks/{id}
          method: patch
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Amzn-Trace-Id
              - UserId
            allowCredentials: false
          request:
            parameters:
              paths:
                id: true
      - http:
          path: tasks/{id}
          method: delete
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Amzn-Trace-Id
              - UserId
            allowCredentials: false
          request:
            parameters:
              paths:
                id: true
      - http:
          path: categories
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Amzn-Trace-Id
              - UserId
            allowCredentials: false

  websocket:
    handler: src/lambdas/websocket.handler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $default
      - websocket:
          route: $disconnect
  handleSNS:
    handler: src/lambdas/handleSNS.handler
    events:
      - sns:
          arn: arn:aws:sns:us-east-1:765588567347:CreditCheckTaskTokenTopic
  # RequestAuthorizer:
  #   handler: src/authorization/index.handler
  #   name: RequestAuthorizer
  #   memorySize: 256
  #   timeout: 60
  
  # HandleGoals:
  #   handler: src/lambdas/handleGoals.handler
  #   name: HandleGoals
  #   memorySize: 256
  #   # timeout: 180
  #   events:
  #     - http:
  #         path: /v1/goals
  #         method: GET
  #         authorizer:
  #           name: RequestAuthorizer
  #           type: request
  #           identitySource: method.request.header.Authorization

resources:
  Resources:
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:userTableName}
    CategoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:categoryTableName}
    GoalTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: N
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:goalTableName}
    TaskTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: startAt
            AttributeType: N
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: startAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:taskTableName}
    RecurringTaskTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: startAt
            AttributeType: N
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: startAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:recurringTaskTableName}
    # ApiGatewayRestApi:
    #   Type: AWS:ApiGateway:RestApi
    #   Properties:
    #     Name: dev-podtree-serverless-api
